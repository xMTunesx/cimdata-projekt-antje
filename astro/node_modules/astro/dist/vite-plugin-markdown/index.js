var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import esbuild from "esbuild";
import fs from "fs";
import { transform } from "@astrojs/compiler";
function markdown({ config }) {
  return {
    name: "astro:markdown",
    enforce: "pre",
    async load(id) {
      if (id.endsWith(".md")) {
        let source = await fs.promises.readFile(id, "utf8");
        let render = config.markdownOptions.render;
        let renderOpts = {};
        if (Array.isArray(render)) {
          renderOpts = render[1];
          render = render[0];
        }
        if (typeof render === "string") {
          ({ default: render } = await import(render));
        }
        let renderResult = await render(source, renderOpts);
        let { frontmatter, metadata, code: astroResult } = renderResult;
        const _a = frontmatter, { layout = "", components = "", setup = "" } = _a, content = __objRest(_a, ["layout", "components", "setup"]);
        content.astro = metadata;
        const prelude = `---
${layout ? `import Layout from '${layout}';` : ""}
${components ? `import * from '${components}';` : ""}
${setup}
const $$content = ${JSON.stringify(content)}
---`;
        const imports = `${layout ? `import Layout from '${layout}';` : ""}
${setup}`.trim();
        if (/\bLayout\b/.test(imports)) {
          astroResult = `${prelude}
<Layout content={$$content}>

${astroResult}

</Layout>`;
        } else {
          astroResult = `${prelude}
${astroResult}`;
        }
        const filenameURL = new URL(`file://${id}`);
        const pathname = filenameURL.pathname.substr(config.projectRoot.pathname.length - 1);
        let { code: tsResult } = await transform(astroResult, {
          pathname,
          projectRoot: config.projectRoot.toString(),
          site: config.buildOptions.site,
          sourcefile: id,
          sourcemap: "inline",
          internalURL: `/@fs${new URL("../runtime/server/index.js", import.meta.url).pathname}`
        });
        tsResult = `
export const metadata = ${JSON.stringify(metadata)};
export const frontmatter = ${JSON.stringify(content)};
${tsResult}`;
        const { code, map } = await esbuild.transform(tsResult, { loader: "ts", sourcemap: "inline", sourcefile: id });
        return {
          code,
          map: null
        };
      }
      return null;
    }
  };
}
export {
  markdown as default
};
