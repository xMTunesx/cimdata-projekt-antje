import type { ComponentInstance, MarkdownRenderOptions, Params, Props, Renderer, RouteData, SSRElement } from '../../@types/astro';
import type { LogOptions } from '../logger.js';
import { RouteCache } from './route-cache.js';
interface GetParamsAndPropsOptions {
    mod: ComponentInstance;
    route: RouteData | undefined;
    routeCache: RouteCache;
    pathname: string;
    logging: LogOptions;
}
export declare const enum GetParamsAndPropsError {
    NoMatchingStaticPath = 0
}
export declare function getParamsAndProps(opts: GetParamsAndPropsOptions): Promise<[Params, Props] | GetParamsAndPropsError>;
interface RenderOptions {
    legacyBuild: boolean;
    logging: LogOptions;
    links: Set<SSRElement>;
    markdownRender: MarkdownRenderOptions;
    mod: ComponentInstance;
    origin: string;
    pathname: string;
    scripts: Set<SSRElement>;
    resolve: (s: string) => Promise<string>;
    renderers: Renderer[];
    route?: RouteData;
    routeCache: RouteCache;
    site?: string;
}
export declare function render(opts: RenderOptions): Promise<string>;
export {};
