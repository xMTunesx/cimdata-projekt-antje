import { resolveDependency } from "../../util.js";
import { createRenderer } from "../renderer.js";
const cache = /* @__PURE__ */ new Map();
async function resolveRenderer(viteServer, renderer, astroConfig) {
  const resolvedRenderer = await createRenderer(renderer, {
    renderer(name) {
      return import(resolveDependency(name, astroConfig));
    },
    async server(entry) {
      const { url } = await viteServer.moduleGraph.ensureEntryFromUrl(entry);
      const mod = await viteServer.ssrLoadModule(url);
      return mod;
    }
  });
  return resolvedRenderer;
}
async function resolveRenderers(viteServer, astroConfig) {
  const ids = astroConfig.renderers;
  const renderers = await Promise.all(ids.map((renderer) => {
    if (cache.has(renderer))
      return cache.get(renderer);
    let promise = resolveRenderer(viteServer, renderer, astroConfig);
    cache.set(renderer, promise);
    return promise;
  }));
  return renderers;
}
export {
  resolveRenderers
};
