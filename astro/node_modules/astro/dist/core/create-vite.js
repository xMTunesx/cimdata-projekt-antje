import { builtinModules } from "module";
import { fileURLToPath } from "url";
import fs from "fs";
import * as vite from "vite";
import astroVitePlugin from "../vite-plugin-astro/index.js";
import astroViteServerPlugin from "../vite-plugin-astro-server/index.js";
import astroPostprocessVitePlugin from "../vite-plugin-astro-postprocess/index.js";
import configAliasVitePlugin from "../vite-plugin-config-alias/index.js";
import markdownVitePlugin from "../vite-plugin-markdown/index.js";
import jsxVitePlugin from "../vite-plugin-jsx/index.js";
import envVitePlugin from "../vite-plugin-env/index.js";
import { resolveDependency } from "./util.js";
const ALWAYS_EXTERNAL = /* @__PURE__ */ new Set([
  ...builtinModules.map((name) => `node:${name}`),
  "@sveltejs/vite-plugin-svelte",
  "micromark-util-events-to-acorn",
  "serialize-javascript",
  "node-fetch",
  "prismjs",
  "shiki",
  "shorthash",
  "unified",
  "whatwg-url"
]);
const ALWAYS_NOEXTERNAL = /* @__PURE__ */ new Set([
  "astro"
]);
async function createVite(inlineConfig, { astroConfig, logging, mode }) {
  const astroPackages = await getAstroPackages(astroConfig);
  let viteConfig = {
    cacheDir: fileURLToPath(new URL("./node_modules/.vite/", astroConfig.projectRoot)),
    clearScreen: false,
    logLevel: "warn",
    optimizeDeps: {
      entries: ["src/**/*"]
    },
    plugins: [
      configAliasVitePlugin({ config: astroConfig }),
      astroVitePlugin({ config: astroConfig, logging }),
      mode === "dev" && astroViteServerPlugin({ config: astroConfig, logging }),
      envVitePlugin({ config: astroConfig }),
      markdownVitePlugin({ config: astroConfig }),
      jsxVitePlugin({ config: astroConfig, logging }),
      astroPostprocessVitePlugin({ config: astroConfig })
    ],
    publicDir: fileURLToPath(astroConfig.public),
    root: fileURLToPath(astroConfig.projectRoot),
    envPrefix: "PUBLIC_",
    server: {
      force: true,
      hmr: process.env.NODE_ENV === "test" || process.env.NODE_ENV === "production" ? false : void 0,
      proxy: {}
    },
    ssr: {
      external: [...ALWAYS_EXTERNAL],
      noExternal: [...ALWAYS_NOEXTERNAL, ...astroPackages]
    }
  };
  for (const name of astroConfig.renderers) {
    try {
      const { default: renderer } = await import(resolveDependency(name, astroConfig));
      if (!renderer)
        continue;
      if (renderer.viteConfig) {
        if (typeof renderer.viteConfig !== "function") {
          throw new Error(`${name}: viteConfig(options) must be a function! Got ${typeof renderer.viteConfig}.`);
        }
        const rendererConfig = await renderer.viteConfig({ mode: inlineConfig.mode, command: inlineConfig.mode === "production" ? "build" : "serve" });
        viteConfig = vite.mergeConfig(viteConfig, rendererConfig);
      }
    } catch (err) {
      throw new Error(`${name}: ${err}`);
    }
  }
  viteConfig = vite.mergeConfig(viteConfig, inlineConfig);
  return viteConfig;
}
async function getAstroPackages({ projectRoot }) {
  const pkgUrl = new URL("./package.json", projectRoot);
  const pkgPath = fileURLToPath(pkgUrl);
  if (!fs.existsSync(pkgPath))
    return [];
  const pkg = JSON.parse(fs.readFileSync(pkgPath, "utf8"));
  const deps = [...Object.keys(pkg.dependencies || {}), ...Object.keys(pkg.devDependencies || {})];
  return deps.filter((dep) => {
    if (isCommonNotAstro(dep))
      return false;
    if (/^astro\-/.test(dep))
      return true;
    const depPkgUrl = new URL(`./node_modules/${dep}/package.json`, projectRoot);
    const depPkgPath = fileURLToPath(depPkgUrl);
    if (!fs.existsSync(depPkgPath))
      return false;
    const { dependencies = {}, peerDependencies = {}, keywords = [] } = JSON.parse(fs.readFileSync(depPkgPath, "utf-8"));
    if (peerDependencies.astro || dependencies.astro)
      return true;
    if (keywords.includes("astro") || keywords.includes("astro-component"))
      return true;
    return false;
  });
}
const COMMON_DEPENDENCIES_NOT_ASTRO = [
  "autoprefixer",
  "react",
  "react-dom",
  "preact",
  "preact-render-to-string",
  "vue",
  "svelte",
  "solid-js",
  "lit",
  "cookie",
  "dotenv",
  "esbuild",
  "eslint",
  "jest",
  "postcss",
  "prettier",
  "astro",
  "tslib",
  "typescript",
  "vite"
];
const COMMON_PREFIXES_NOT_ASTRO = [
  "@webcomponents/",
  "@fontsource/",
  "@postcss-plugins/",
  "@rollup/",
  "@astrojs/renderer-",
  "@types/",
  "@typescript-eslint/",
  "eslint-",
  "jest-",
  "postcss-plugin-",
  "prettier-plugin-",
  "remark-",
  "rehype-",
  "rollup-plugin-",
  "vite-plugin-"
];
function isCommonNotAstro(dep) {
  return COMMON_DEPENDENCIES_NOT_ASTRO.includes(dep) || COMMON_PREFIXES_NOT_ASTRO.some((prefix) => prefix.startsWith("@") ? dep.startsWith(prefix) : dep.substring(dep.lastIndexOf("/") + 1).startsWith(prefix));
}
export {
  createVite
};
